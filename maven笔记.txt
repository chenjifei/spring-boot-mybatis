maven目录架构
src
 	-main
 	  	-java
 	  		-package
    -test 
      	-java 
      		-package

     resources
     

     mvn -v 查看maven版本
     compile 编译
     test    测试
     package 打包


     clean  删除 target
     install  安装jar包到本地仓库中



     创建目录的两种方式
     1.archetype:generate
     按照提示进行选择
     2.archtype:generate -DgroupId=组织名。一般为公司网址的反写+项目名称
     -DartifactId=项目名称-模块名称
     -Dversion =版本号
     -Dpackage =代码所在的包名

     坐标
     	构建
     仓库
     	本地仓库和远程仓库
     镜像仓库
         镜像仓库配置
         settings.xml
         <mirror>
	      <id>maven.net.cn</id>
	      <mirrorOf>central</mirrorOf>//也可以使用通配符*
	      <name>central mirror in china</name>
	      <url>http://maven.net.cn/content/groups/public</url>
	    </mirror>

	 如何更改仓库位置
	 		settings.xml
   默认--Default: ${user.home}/.m2/repository
      -- <localRepository>/path/to/local/repo</localRepository>

	<localRepository>你想要存放的路径</localRepository>

	maven生命周期
	clean   清理项目
		pre-clean 执行清理前的工作
		clean  清理上一次构建生成的所有文件
		post-clean  清理执行后的文件
	default 构建项目（最核心）
		compile  test  package  install		
	site     生成项目站点
		pre-site    在生成项目站点前要完成的工作
		site        生成项目的站点文档
		post-site   在生成项目站点后要完成的工作
		site-deploy 发布生成的站点到服务器    

修改maven在eclipse中创建项目时显示的jre版本号问题

	<profiles>
		<id>jdk-1.7</id>
		<activation>
			<activeByDefault>true</activeByDefault>
			<jdk>1.7</jdk>
		</activation>
		<properties>
			<maven.compiler.source>1.7</maven.compiler.source>
			<maven.compiler.target>1.7</maven.compiler.target>
			<maven.compiler.compilerVersion>1.7</maven.compiler.compilerVersion>
		</properties>
	</profiles>

依赖冲突
	1.短路优先
	 A->B->C->X(jar)
	 A->D->X(jar) 优先
	2.先声明先优先
	 如果路径长度相同，则谁先声明，先谁解析

--jetty插件、tomcat插件
<build>
    <finalName>webdemo</finalName>
    <plugins>
    	<plugin>
    	
    		<!-- jetty插件 
    		<groupId>org.mortbay.jetty</groupId>
    		<artifactId>jetty-maven-plugin</artifactId>
    		<version>8.1.16.v20140903</version> -->
    		<!-- tomcat插件 -->
    		<groupId>org.apache.tomcat.maven</groupId>
    		<artifactId>tomcat7-maven-plugin</artifactId>
    		<version>2.2</version>
    		<executions>
    			<execution>
    			<!-- 在打包成 功后使用jetty:run来运行jetty的服务-->
    				<phase>package</phase>
    				<goals>
    					<goal>run</goal>
    				</goals>
    			</execution>
    		</executions>
    	
    	</plugin>
    </plugins>
    
  </build>
















---实例pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.imooc.hi</groupId>
  <artifactId>hi</artifactId>
  <!-- 
  	第一个0表示大版本号
  	第二个0表示分支版本
  	第三个0表示小版本
  	如0.0.1
  	snapshot 快照
  	alpha 内部测试
  	beta  公测
  	Release 稳定
  	GA  正式发布
   --> 
  <version>0.0.1-SNAPSHOT</version>
  <!-- 打包方式
  默认值jar
  其他方式
  war zip pom
   -->
  <packaging>jar</packaging>
	<!-- 项目描述名 -->
  <name>hi</name>
  <!-- 项目地址 -->
  <url>http://maven.apache.org</url>
	<!-- 项目描述 
	<description></description>
	-->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
<!-- 依赖列表 -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>     
      <!-- 
    	  默认依赖是否可选
      true   必须显示引入依赖
      false  默认      继承
      
      <optional></optional>
       -->
      <!-- 排除依赖传递列表 
      <exclusions>
      	<exclusion></exclusion>
      </exclusions>
      -->
    </dependency>
  </dependencies>
  <!-- 
  	依赖管理 
  <dependencyManagement>
  	<dependencies>
  		<dependency>
  		</dependency>
  	</dependencies>
  </dependencyManagement>
   -->
  <build>
     <!--插件列表-->
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-source-plugin</artifactId>
  			<version>2.4</version>
  			<executions>
				<execution>
					<phase>package</phase>
					<goals>
						<goal>
							jar-no-fork
						</goal>
					</goals>
				</execution>			
  			</executions>
  		</plugin>
  	</plugins>
  </build>
</project>



















